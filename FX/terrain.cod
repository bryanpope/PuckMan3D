//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWVP;                      // Offset:    0, size:   64
    float4x4 gW;                        // Offset:   64, size:   64
    float4x4 gInvTransposeW;            // Offset:  128, size:   64
}

cbuffer cbPerFrame
{
    float4  gAmbientLight;              // Offset:    0, size:   16
    PointLight gPointLight;             // Offset:   16, size:   48
    float3  gEyePos;                    // Offset:   64, size:   12
    SpotLight gSpotLight;               // Offset:   80, size:   64
}

cbuffer cbFixed
{
    float4  fogColour = { 0.5, 0.5, 0.5, 1 };// Offset:    0, size:   16
    float   startFogDist = 0;           // Offset:   16, size:    4
    float   maxFogDist = 75;            // Offset:   20, size:    4
}

//
// 6 local object(s)
//
SamplerState mySampler
{
    Filter   = uint(MIN_MAG_MIP_LINEAR /* 21 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
Texture2D gDiffuseMap;
Texture2D gDiffuseMap2;
Texture2D gDiffuseMap3;
Texture2D gDiffuseMap4;
Texture2D gBlend;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 1 technique(s)
    //
    technique11 TestTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64
                //   float4x4 gW;                       // Offset:   64 Size:    64
                //   float4x4 gInvTransposeW;           // Offset:  128 Size:    64
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // TEXCOORD                 1   xy          3     NONE   float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // TEXCOORD                 1     zw        1     NONE   float     zw
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[11], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o1.zw
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_temps 4
                dp3 r0.x, v1.xyzx, cb0[8].xyzx
                dp3 r0.y, v1.xyzx, cb0[9].xyzx
                dp3 r0.z, v1.xyzx, cb0[10].xyzx
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[4].xyzw
                dp4 r2.y, r1.xyzw, cb0[5].xyzw
                dp4 r2.z, r1.xyzw, cb0[6].xyzw
                dp4 r3.x, r1.xyzw, cb0[0].xyzw
                dp4 r3.y, r1.xyzw, cb0[1].xyzw
                dp4 r3.z, r1.xyzw, cb0[2].xyzw
                dp4 r3.w, r1.xyzw, cb0[3].xyzw
                mov r1.xy, v2.xyxx
                mov r1.zw, v3.xxxy
                mov o0.xyzw, r3.xyzw
                mov o1.xy, r1.xyxx
                mov o1.zw, r1.zzzw
                mov o2.xyz, r2.xyzx
                mov o3.xyz, r0.xyzx
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4 gAmbientLight;              // Offset:    0 Size:    16
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 lightColour;            // Offset:   16
                //       float3 pos;                    // Offset:   32
                //       float range;                   // Offset:   44
                //       float3 att;                    // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gPointLight;                     // Offset:   16 Size:    48
                //   float3 gEyePos;                    // Offset:   64 Size:    12
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 lightColour;            // Offset:   80
                //       float3 pos;                    // Offset:   96
                //       float range;                   // Offset:  108
                //       float3 direction;              // Offset:  112
                //       float spot;                    // Offset:  124
                //       float3 att;                    // Offset:  128
                //       float pad;                     // Offset:  140
                //
                //   } gSpotLight;                      // Offset:   80 Size:    64
                //
                // }
                //
                // cbuffer cbFixed
                // {
                //
                //   float4 fogColour;                  // Offset:    0 Size:    16
                //      = 0x3f000000 0x3f000000 0x3f000000 0x3f800000 
                //   float startFogDist;                // Offset:   16 Size:     4
                //      = 0x00000000 
                //   float maxFogDist;                  // Offset:   20 Size:     4
                //      = 0x42960000 
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // mySampler                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // gDiffuseMap2                      texture  float4          2d    1        1
                // gDiffuseMap3                      texture  float4          2d    2        1
                // gDiffuseMap4                      texture  float4          2d    3        1
                // gBlend                            texture  float4          2d    4        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbFixed                           cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // TEXCOORD                 1     zw        1     NONE   float     zw
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[2], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_resource_texture2d (float,float,float,float) t2
                dcl_resource_texture2d (float,float,float,float) t3
                dcl_resource_texture2d (float,float,float,float) t4
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v1.zw
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_output o0.xyzw
                dcl_temps 16
                sample_indexable(texture2d)(float,float,float,float) r0.xyz, v1.zwzz, t4.xyzw, s0
                mov r0.xyz, r0.xyzx
                sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
                sample_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t1.xyzw, s0
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v1.xyxx, t2.xyzw, s0
                sample_indexable(texture2d)(float,float,float,float) r4.xyzw, v1.xyxx, t3.xyzw, s0
                mov r1.xyzw, r1.xyzw
                mov r5.xyzw, -r1.xyzw
                add r2.xyzw, r2.xyzw, r5.xyzw
                mul r2.xyzw, r0.xxxx, r2.xyzw
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.xyzw, -r1.xyzw
                add r2.xyzw, r2.xyzw, r3.xyzw
                mul r2.xyzw, r0.yyyy, r2.xyzw
                add r1.xyzw, r1.xyzw, r2.xyzw
                mov r2.xyzw, -r1.xyzw
                add r2.xyzw, r2.xyzw, r4.xyzw
                mul r0.xyzw, r0.zzzz, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw
                mov r1.xyzw, l(0.300000,0.300000,0.300000,100.000000)
                mov r2.xyz, -v2.xyzx
                add r2.xyz, r2.xyzx, cb0[4].xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                sqrt r2.w, r2.w
                dp3 r3.x, r2.xyzx, r2.xyzx
                rsq r3.x, r3.x
                mul r2.xyz, r2.xyzx, r3.xxxx
                mov r0.xyz, r0.xyzx
                mov r1.xyzw, r1.xyzw
                mov r3.xyz, cb0[1].xyzx
                mov r4.xyz, cb0[2].xyzx
                mov r3.w, cb0[2].w
                mov r5.xyz, cb0[3].xyzx
                mov r6.xyz, v2.xyzx
                mov r7.xyz, v3.xyzx
                mov r2.xyz, r2.xyzx
                mov r8.xyz, l(0,0,0,0)
                mov r9.xyz, l(0,0,0,0)
                mov r4.xyz, -r4.xyzx
                add r4.xyz, r4.xyzx, r6.xyzx
                dp3 r4.w, r4.xyzx, r4.xyzx
                sqrt r4.w, r4.w
                lt r3.w, r3.w, r4.w
                if_z r3.w
                  div r4.xyz, r4.xyzx, r4.wwww
                  mov r6.xyz, -r4.xyzx
                  dp3 r3.w, r6.xyzx, r7.xyzx
                  itof r5.w, l(0)
                  lt r5.w, r5.w, r3.w
                  if_nz r5.w
                    mul r6.xyz, r3.xyzx, r3.wwww
                    mul r8.xyz, r0.xyzx, r6.xyzx
                    dp3 r3.w, r4.xyzx, r7.xyzx
                    add r3.w, r3.w, r3.w
                    mov r3.w, -r3.w
                    mul r6.xyz, r3.wwww, r7.xyzx
                    add r4.xyz, r4.xyzx, r6.xyzx
                    dp3 r3.w, r2.xyzx, r4.xyzx
                    max r3.w, r3.w, l(0.000000)
                    log r3.w, r3.w
                    mul r3.w, r1.w, r3.w
                    exp r3.w, r3.w
                    mul r3.xyz, r3.xyzx, r3.wwww
                    mul r9.xyz, r1.xyzx, r3.xyzx
                  endif 
                  mul r3.x, r5.y, r4.w
                  add r3.x, r3.x, r5.x
                  mov r3.y, l(1.000000)
                  mul r3.z, r4.w, r4.w
                  mul r3.y, r3.z, r3.y
                  mul r3.y, r5.z, r3.y
                  add r3.x, r3.y, r3.x
                  div r3.x, l(1.000000), r3.x
                  mul r8.xyz, r3.xxxx, r8.xyzx
                  mul r9.xyz, r3.xxxx, r9.xyzx
                endif 
                mov r8.xyz, r8.xyzx
                mov r9.xyz, r9.xyzx
                mov r8.xyz, r8.xyzx
                mov r9.xyz, r9.xyzx
                mov r1.xyzw, r1.xyzw
                mov r3.xyz, r0.xyzx
                mov r4.xyz, cb0[5].xyzx
                mov r5.xyz, cb0[6].xyzx
                mov r6.xyz, cb0[7].xyzx
                mov r7.xyz, cb0[8].xyzx
                mov r3.w, cb0[6].w
                mov r4.w, cb0[7].w
                mov r10.xyz, v2.xyzx
                mov r11.xyz, v3.xyzx
                mov r2.xyz, r2.xyzx
                mov r4.xyz, r4.xyzx
                mov r5.xyz, r5.xyzx
                mov r3.w, r3.w
                mov r7.xyz, r7.xyzx
                mov r3.xyz, r3.xyzx
                mov r1.xyzw, r1.xyzw
                mov r4.xyz, r4.xyzx
                mov r5.xyz, r5.xyzx
                mov r3.w, r3.w
                mov r7.xyz, r7.xyzx
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                mov r2.xyz, r2.xyzx
                mov r12.xyz, l(0,0,0,0)
                mov r13.xyz, l(0,0,0,0)
                mov r14.xyz, -r5.xyzx
                add r14.xyz, r10.xyzx, r14.xyzx
                dp3 r5.w, r14.xyzx, r14.xyzx
                sqrt r5.w, r5.w
                lt r3.w, r3.w, r5.w
                if_z r3.w
                  div r14.xyz, r14.xyzx, r5.wwww
                  mov r15.xyz, -r14.xyzx
                  dp3 r3.w, r15.xyzx, r11.xyzx
                  itof r6.w, l(0)
                  lt r6.w, r6.w, r3.w
                  if_nz r6.w
                    mul r15.xyz, r4.xyzx, r3.wwww
                    mul r12.xyz, r3.xyzx, r15.xyzx
                    dp3 r3.x, r14.xyzx, r11.xyzx
                    add r3.x, r3.x, r3.x
                    mov r3.x, -r3.x
                    mul r3.xyz, r3.xxxx, r11.xyzx
                    add r3.xyz, r14.xyzx, r3.xyzx
                    dp3 r2.x, r2.xyzx, r3.xyzx
                    max r2.x, r2.x, l(0.000000)
                    log r2.x, r2.x
                    mul r1.w, r1.w, r2.x
                    exp r1.w, r1.w
                    mul r2.xyz, r4.xyzx, r1.wwww
                    mul r13.xyz, r1.xyzx, r2.xyzx
                  endif 
                  mul r1.x, r7.y, r5.w
                  add r1.x, r1.x, r7.x
                  mov r1.y, l(1.000000)
                  mul r1.z, r5.w, r5.w
                  mul r1.y, r1.z, r1.y
                  mul r1.y, r7.z, r1.y
                  add r1.x, r1.y, r1.x
                  div r1.x, l(1.000000), r1.x
                  mul r12.xyz, r1.xxxx, r12.xyzx
                  mul r13.xyz, r1.xxxx, r13.xyzx
                endif 
                mov r12.xyz, r12.xyzx
                mov r13.xyz, r13.xyzx
                mov r1.xyz, -r5.xyzx
                add r1.xyz, r1.xyzx, r10.xyzx
                dp3 r1.w, r1.xyzx, r1.xyzx
                rsq r1.w, r1.w
                mul r1.xyz, r1.wwww, r1.xyzx
                dp3 r1.x, r1.xyzx, r6.xyzx
                max r1.x, r1.x, l(0.000000)
                log r1.x, r1.x
                mul r1.x, r1.x, r4.w
                exp r1.x, r1.x
                mul r1.yzw, r1.xxxx, r12.xxyz
                mul r2.xyz, r1.xxxx, r13.xyzx
                mov r1.yzw, r1.yyzw
                mov r2.xyz, r2.xyzx
                add r1.xyz, r1.yzwy, r8.xyzx
                add r2.xyz, r2.xyzx, r9.xyzx
                mul r3.xyz, r0.xyzx, cb0[0].xyzx
                add r1.xyz, r1.xyzx, r3.xyzx
                add r0.xyz, r2.xyzx, r1.xyzx
                mov r0.w, r0.w
                mov r1.x, -cb1[1].x
                add r1.x, r1.x, r2.w
                div r1.x, r1.x, cb1[1].y
                max r1.x, r1.x, l(0.000000)
                min r1.x, r1.x, l(1.000000)
                mov r2.xyzw, -r0.xyzw
                add r2.xyzw, r2.xyzw, cb1[0].xyzw
                mul r1.xyzw, r1.xxxx, r2.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 177 instruction slots used
                            
            };
        }

    }

}

