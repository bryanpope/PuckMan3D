//
// FX Version: fx_5_0
//
// 3 local buffer(s)
//
cbuffer cbPerObject
{
    float4x4 gWVP;                      // Offset:    0, size:   64
    float4x4 gW;                        // Offset:   64, size:   64
    float4x4 gViewProj;                 // Offset:  128, size:   64
    float4x4 gInvTransposeW;            // Offset:  192, size:   64
    Material gMaterial;                 // Offset:  256, size:   64
}

cbuffer cbPerFrame
{
    float4  gAmbientLight;              // Offset:    0, size:   16
    PointLight gPointLight[5];          // Offset:   16, size:  240
    float3  gEyePos;                    // Offset:  256, size:   12
    SpotLight gSpotLight[9];            // Offset:  272, size:  576
}

cbuffer cbFixed
{
    float4  fogColour = { 0.5, 0.5, 0.5, 1 };// Offset:    0, size:   16
    float   startFogDist = 0;           // Offset:   16, size:    4
    float   maxFogDist = 75;            // Offset:   20, size:    4
}

//
// 3 local object(s)
//
DepthStencilState DSS
{
    DepthEnable = bool(FALSE /* false */);
    DepthWriteMask = uint(ZERO /* 0 */);
    StencilEnable = bool(FALSE /* false */);
    StencilReadMask = byte(0x00);
    StencilWriteMask = byte(0x00);
    FrontFaceStencilFunc = uint(ALWAYS /* 8 */);
    FrontFaceStencilPass = uint(INCR /* 7 */);
    FrontFaceStencilFail = uint(KEEP /* 1 */);
    BackFaceStencilFunc = uint(ALWAYS /* 8 */);
    BackFaceStencilPass = uint(INCR /* 7 */);
    BackFaceStencilFail = uint(KEEP /* 1 */);
};
SamplerState mySampler
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
    BorderColor = float4(0, 0, 0, 1);
};
Texture2D gDiffuseMap;

//
// 1 groups(s)
//
fxgroup
{
    //
    // 6 technique(s)
    //
    technique11 TestTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64
                //   float4x4 gW;                       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvTransposeW;           // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float       
                // WORLD                    1   xyzw        4     NONE   float       
                // WORLD                    2   xyzw        5     NONE   float       
                // WORLD                    3   xyzw        6     NONE   float       
                // COLOR                    0   xyzw        7     NONE   float   xyzw
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v7.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_temps 5
                dp3 r0.x, v1.xyzx, cb0[12].xyzx
                dp3 r0.y, v1.xyzx, cb0[13].xyzx
                dp3 r0.z, v1.xyzx, cb0[14].xyzx
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[4].xyzw
                dp4 r2.y, r1.xyzw, cb0[5].xyzw
                dp4 r2.z, r1.xyzw, cb0[6].xyzw
                dp4 r3.x, r1.xyzw, cb0[0].xyzw
                dp4 r3.y, r1.xyzw, cb0[1].xyzw
                dp4 r3.z, r1.xyzw, cb0[2].xyzw
                dp4 r3.w, r1.xyzw, cb0[3].xyzw
                mov r1.xy, v2.xyxx
                mov r4.xyzw, v7.xyzw
                mov o0.xyzw, r3.xyzw
                mov o4.xyzw, r4.xyzw
                mov o2.xyz, r2.xyzx
                mov o3.xyz, r0.xyzx
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4 gAmbientLight;              // Offset:    0 Size:    16
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 lightColour;            // Offset:   16
                //       float3 pos;                    // Offset:   32
                //       float range;                   // Offset:   44
                //       float3 att;                    // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gPointLight[5];                  // Offset:   16 Size:   240
                //   float3 gEyePos;                    // Offset:  256 Size:    12
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 lightColour;            // Offset:  272
                //       float3 pos;                    // Offset:  288
                //       float range;                   // Offset:  300
                //       float3 direction;              // Offset:  304
                //       float spot;                    // Offset:  316
                //       float3 att;                    // Offset:  320
                //       float pad;                     // Offset:  332
                //
                //   } gSpotLight[9];                   // Offset:  272 Size:   576
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // mySampler                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[53], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_output o0.xyzw
                dcl_temps 21
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
                mov r1.xyzw, l(0.750000,0.750000,0.750000,1000.000000)
                dp3 r2.x, v3.xyzx, v3.xyzx
                rsq r2.x, r2.x
                mul r2.xyz, r2.xxxx, v3.xyzx
                mov r3.xyz, -v2.xyzx
                add r3.xyz, r3.xyzx, cb0[16].xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                mov r4.xyz, l(0,0,0,0)
                mov r5.xyz, l(0,0,0,0)
                mov r0.xyz, r0.xyzx
                mov r1.xyzw, r1.xyzw
                mov r6.xyz, cb0[1].xyzx
                mov r7.xyz, cb0[2].xyzx
                mov r2.w, cb0[2].w
                mov r8.xyz, cb0[3].xyzx
                mov r9.xyz, v2.xyzx
                mov r2.xyz, r2.xyzx
                mov r3.xyz, r3.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r0.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r1.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r1.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb0[4].xyzx
                mov r7.xyz, cb0[5].xyzx
                mov r2.w, cb0[5].w
                mov r8.xyz, cb0[6].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r0.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r1.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r1.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb0[7].xyzx
                mov r7.xyz, cb0[8].xyzx
                mov r2.w, cb0[8].w
                mov r8.xyz, cb0[9].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r0.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r1.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r1.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb0[10].xyzx
                mov r7.xyz, cb0[11].xyzx
                mov r2.w, cb0[11].w
                mov r8.xyz, cb0[12].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r0.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r1.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r1.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb0[13].xyzx
                mov r7.xyz, cb0[14].xyzx
                mov r2.w, cb0[14].w
                mov r8.xyz, cb0[15].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r0.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r1.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r1.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r2.w, l(0)
                mov r6.xyz, r4.xyzx
                mov r7.xyz, r5.xyzx
                mov r3.w, r2.w
                loop 
                  ilt r4.w, r3.w, l(9)
                  breakc_z r4.w
                  mov r8.xyzw, r1.xyzw
                  mov r9.xyz, r0.xyzx
                  imul null, r4.w, r3.w, l(4)
                  mov r10.xyz, cb0[r4.w + 17].xyzx
                  mov r11.xyz, cb0[r4.w + 18].xyzx
                  mov r12.xyz, cb0[r4.w + 19].xyzx
                  mov r13.xyz, cb0[r4.w + 20].xyzx
                  mov r5.w, cb0[r4.w + 18].w
                  mov r4.w, cb0[r4.w + 19].w
                  mov r14.xyz, v2.xyzx
                  mov r15.xyz, r2.xyzx
                  mov r16.xyz, r3.xyzx
                  mov r10.xyz, r10.xyzx
                  mov r11.xyz, r11.xyzx
                  mov r5.w, r5.w
                  mov r13.xyz, r13.xyzx
                  mov r9.xyz, r9.xyzx
                  mov r8.xyzw, r8.xyzw
                  mov r10.xyz, r10.xyzx
                  mov r11.xyz, r11.xyzx
                  mov r5.w, r5.w
                  mov r13.xyz, r13.xyzx
                  mov r14.xyz, r14.xyzx
                  mov r15.xyz, r15.xyzx
                  mov r16.xyz, r16.xyzx
                  mov r17.xyz, l(0,0,0,0)
                  mov r18.xyz, l(0,0,0,0)
                  mov r19.xyz, -r11.xyzx
                  add r19.xyz, r14.xyzx, r19.xyzx
                  dp3 r6.w, r19.xyzx, r19.xyzx
                  sqrt r6.w, r6.w
                  lt r5.w, r5.w, r6.w
                  if_z r5.w
                    div r19.xyz, r19.xyzx, r6.wwww
                    mov r20.xyz, -r19.xyzx
                    dp3 r5.w, r20.xyzx, r15.xyzx
                    itof r7.w, l(0)
                    lt r7.w, r7.w, r5.w
                    if_nz r7.w
                      mul r20.xyz, r10.xyzx, r5.wwww
                      mul r17.xyz, r9.xyzx, r20.xyzx
                      dp3 r5.w, r19.xyzx, r15.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r9.xyz, r5.wwww, r15.xyzx
                      add r9.xyz, r19.xyzx, r9.xyzx
                      dp3 r5.w, r16.xyzx, r9.xyzx
                      max r5.w, r5.w, l(0.000000)
                      log r5.w, r5.w
                      mul r5.w, r5.w, r8.w
                      exp r5.w, r5.w
                      mul r9.xyz, r10.xyzx, r5.wwww
                      mul r18.xyz, r8.xyzx, r9.xyzx
                    endif 
                    mul r5.w, r13.y, r6.w
                    add r5.w, r5.w, r13.x
                    mov r7.w, l(1.000000)
                    mul r6.w, r6.w, r6.w
                    mul r6.w, r6.w, r7.w
                    mul r6.w, r13.z, r6.w
                    add r5.w, r5.w, r6.w
                    div r5.w, l(1.000000), r5.w
                    mul r17.xyz, r5.wwww, r17.xyzx
                    mul r18.xyz, r5.wwww, r18.xyzx
                  endif 
                  mov r17.xyz, r17.xyzx
                  mov r18.xyz, r18.xyzx
                  mov r8.xyz, -r11.xyzx
                  add r8.xyz, r8.xyzx, r14.xyzx
                  dp3 r5.w, r8.xyzx, r8.xyzx
                  rsq r5.w, r5.w
                  mul r8.xyz, r5.wwww, r8.xyzx
                  dp3 r5.w, r8.xyzx, r12.xyzx
                  max r5.w, r5.w, l(0.000000)
                  log r5.w, r5.w
                  mul r4.w, r4.w, r5.w
                  exp r4.w, r4.w
                  mul r8.xyz, r4.wwww, r17.xyzx
                  mul r9.xyz, r4.wwww, r18.xyzx
                  mov r8.xyz, r8.xyzx
                  mov r9.xyz, r9.xyzx
                  add r6.xyz, r6.xyzx, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx
                  iadd r3.w, r3.w, l(1)
                endloop 
                mul r1.xyz, r0.xyzx, cb0[0].xyzx
                add r1.xyz, r6.xyzx, r1.xyzx
                add r0.xyz, r7.xyzx, r1.xyzx
                mov r0.w, r0.w
                mov r0.xyz, r0.xyzx
                mov r0.w, r0.w
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 361 instruction slots used
                            
            };
        }

    }

    technique11 TestTechCRTShader
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64
                //   float4x4 gW;                       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvTransposeW;           // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float       
                // WORLD                    1   xyzw        4     NONE   float       
                // WORLD                    2   xyzw        5     NONE   float       
                // WORLD                    3   xyzw        6     NONE   float       
                // COLOR                    0   xyzw        7     NONE   float   xyzw
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v7.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_temps 5
                dp3 r0.x, v1.xyzx, cb0[12].xyzx
                dp3 r0.y, v1.xyzx, cb0[13].xyzx
                dp3 r0.z, v1.xyzx, cb0[14].xyzx
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[4].xyzw
                dp4 r2.y, r1.xyzw, cb0[5].xyzw
                dp4 r2.z, r1.xyzw, cb0[6].xyzw
                dp4 r3.x, r1.xyzw, cb0[0].xyzw
                dp4 r3.y, r1.xyzw, cb0[1].xyzw
                dp4 r3.z, r1.xyzw, cb0[2].xyzw
                dp4 r3.w, r1.xyzw, cb0[3].xyzw
                mov r1.xy, v2.xyxx
                mov r4.xyzw, v7.xyzw
                mov o0.xyzw, r3.xyzw
                mov o4.xyzw, r4.xyzw
                mov o2.xyz, r2.xyzx
                mov o3.xyz, r0.xyzx
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4 gAmbientLight;              // Offset:    0 Size:    16
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 lightColour;            // Offset:   16
                //       float3 pos;                    // Offset:   32
                //       float range;                   // Offset:   44
                //       float3 att;                    // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gPointLight[5];                  // Offset:   16 Size:   240
                //   float3 gEyePos;                    // Offset:  256 Size:    12
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 lightColour;            // Offset:  272
                //       float3 pos;                    // Offset:  288
                //       float range;                   // Offset:  300
                //       float3 direction;              // Offset:  304
                //       float spot;                    // Offset:  316
                //       float3 att;                    // Offset:  320
                //       float pad;                     // Offset:  332
                //
                //   } gSpotLight[9];                   // Offset:  272 Size:   576
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // mySampler                         sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xy  
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[53], dynamicIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_input_ps linear v1.xy
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_output o0.xyzw
                dcl_temps 21
                sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
                mov r1.xyzw, l(0.750000,0.750000,0.750000,1000.000000)
                dp3 r2.x, v3.xyzx, v3.xyzx
                rsq r2.x, r2.x
                mul r2.xyz, r2.xxxx, v3.xyzx
                mov r3.xyz, -v2.xyzx
                add r3.xyz, r3.xyzx, cb0[16].xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                mov r4.xyz, l(0,0,0,0)
                mov r5.xyz, l(0,0,0,0)
                mov r0.xyz, r0.xyzx
                mov r1.xyzw, r1.xyzw
                mov r6.xyz, cb0[1].xyzx
                mov r7.xyz, cb0[2].xyzx
                mov r2.w, cb0[2].w
                mov r8.xyz, cb0[3].xyzx
                mov r9.xyz, v2.xyzx
                mov r2.xyz, r2.xyzx
                mov r3.xyz, r3.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r0.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r1.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r1.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb0[4].xyzx
                mov r7.xyz, cb0[5].xyzx
                mov r2.w, cb0[5].w
                mov r8.xyz, cb0[6].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r0.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r1.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r1.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb0[7].xyzx
                mov r7.xyz, cb0[8].xyzx
                mov r2.w, cb0[8].w
                mov r8.xyz, cb0[9].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r0.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r1.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r1.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb0[10].xyzx
                mov r7.xyz, cb0[11].xyzx
                mov r2.w, cb0[11].w
                mov r8.xyz, cb0[12].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r0.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r1.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r1.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb0[13].xyzx
                mov r7.xyz, cb0[14].xyzx
                mov r2.w, cb0[14].w
                mov r8.xyz, cb0[15].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r0.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r1.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r1.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r2.w, l(0)
                mov r6.xyz, r4.xyzx
                mov r7.xyz, r5.xyzx
                mov r3.w, r2.w
                loop 
                  ilt r4.w, r3.w, l(9)
                  breakc_z r4.w
                  mov r8.xyzw, r1.xyzw
                  mov r9.xyz, r0.xyzx
                  imul null, r4.w, r3.w, l(4)
                  mov r10.xyz, cb0[r4.w + 17].xyzx
                  mov r11.xyz, cb0[r4.w + 18].xyzx
                  mov r12.xyz, cb0[r4.w + 19].xyzx
                  mov r13.xyz, cb0[r4.w + 20].xyzx
                  mov r5.w, cb0[r4.w + 18].w
                  mov r4.w, cb0[r4.w + 19].w
                  mov r14.xyz, v2.xyzx
                  mov r15.xyz, r2.xyzx
                  mov r16.xyz, r3.xyzx
                  mov r10.xyz, r10.xyzx
                  mov r11.xyz, r11.xyzx
                  mov r5.w, r5.w
                  mov r13.xyz, r13.xyzx
                  mov r9.xyz, r9.xyzx
                  mov r8.xyzw, r8.xyzw
                  mov r10.xyz, r10.xyzx
                  mov r11.xyz, r11.xyzx
                  mov r5.w, r5.w
                  mov r13.xyz, r13.xyzx
                  mov r14.xyz, r14.xyzx
                  mov r15.xyz, r15.xyzx
                  mov r16.xyz, r16.xyzx
                  mov r17.xyz, l(0,0,0,0)
                  mov r18.xyz, l(0,0,0,0)
                  mov r19.xyz, -r11.xyzx
                  add r19.xyz, r14.xyzx, r19.xyzx
                  dp3 r6.w, r19.xyzx, r19.xyzx
                  sqrt r6.w, r6.w
                  lt r5.w, r5.w, r6.w
                  if_z r5.w
                    div r19.xyz, r19.xyzx, r6.wwww
                    mov r20.xyz, -r19.xyzx
                    dp3 r5.w, r20.xyzx, r15.xyzx
                    itof r7.w, l(0)
                    lt r7.w, r7.w, r5.w
                    if_nz r7.w
                      mul r20.xyz, r10.xyzx, r5.wwww
                      mul r17.xyz, r9.xyzx, r20.xyzx
                      dp3 r5.w, r19.xyzx, r15.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r9.xyz, r5.wwww, r15.xyzx
                      add r9.xyz, r19.xyzx, r9.xyzx
                      dp3 r5.w, r16.xyzx, r9.xyzx
                      max r5.w, r5.w, l(0.000000)
                      log r5.w, r5.w
                      mul r5.w, r5.w, r8.w
                      exp r5.w, r5.w
                      mul r9.xyz, r10.xyzx, r5.wwww
                      mul r18.xyz, r8.xyzx, r9.xyzx
                    endif 
                    mul r5.w, r13.y, r6.w
                    add r5.w, r5.w, r13.x
                    mov r7.w, l(1.000000)
                    mul r6.w, r6.w, r6.w
                    mul r6.w, r6.w, r7.w
                    mul r6.w, r13.z, r6.w
                    add r5.w, r5.w, r6.w
                    div r5.w, l(1.000000), r5.w
                    mul r17.xyz, r5.wwww, r17.xyzx
                    mul r18.xyz, r5.wwww, r18.xyzx
                  endif 
                  mov r17.xyz, r17.xyzx
                  mov r18.xyz, r18.xyzx
                  mov r8.xyz, -r11.xyzx
                  add r8.xyz, r8.xyzx, r14.xyzx
                  dp3 r5.w, r8.xyzx, r8.xyzx
                  rsq r5.w, r5.w
                  mul r8.xyz, r5.wwww, r8.xyzx
                  dp3 r5.w, r8.xyzx, r12.xyzx
                  max r5.w, r5.w, l(0.000000)
                  log r5.w, r5.w
                  mul r4.w, r4.w, r5.w
                  exp r4.w, r4.w
                  mul r8.xyz, r4.wwww, r17.xyzx
                  mul r9.xyz, r4.wwww, r18.xyzx
                  mov r8.xyz, r8.xyzx
                  mov r9.xyz, r9.xyzx
                  add r6.xyz, r6.xyzx, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx
                  iadd r3.w, r3.w, l(1)
                endloop 
                mul r1.xyz, r0.xyzx, cb0[0].xyzx
                add r1.xyz, r6.xyzx, r1.xyzx
                add r0.xyz, r7.xyzx, r1.xyzx
                mov r0.w, r0.w
                mov r1.xy, v0.xyxx
                mov r0.xyz, r0.xyzx
                mov r0.w, r0.w
                mov r1.z, l(0.800000)
                mov r1.w, l(0.700000)
                itof r2.x, l(27)
                mov r2.y, l(2.100000)
                mov r3.xyz, l(0.750000,0.750000,0.750000,0)
                mov r2.zw, l(-0.000000,-0.000000,-0.500000,-0.500000)
                add r1.xy, r1.xyxx, r2.zwzz
                ftou r1.x, r1.x
                mov r2.z, l(3)
                udiv null, r1.x, r1.x, r2.z
                mov r2.z, l(1)
                ieq r2.z, r1.x, r2.z
                if_nz r2.z
                  itof r4.xw, l(1, 0, 0, 1)
                  mov r4.y, r1.z
                  mov r4.z, r1.w
                else 
                  mov r2.z, l(2)
                  ieq r1.x, r1.x, r2.z
                  if_nz r1.x
                    itof r4.yw, l(0, 1, 0, 1)
                    mov r4.x, r1.w
                    mov r4.z, r1.z
                  else 
                    itof r4.zw, l(0, 0, 1, 1)
                    mov r4.x, r1.z
                    mov r4.y, r1.w
                  endif 
                endif 
                ftou r1.x, r1.y
                mov r1.y, l(3)
                udiv null, r1.x, r1.x, r1.y
                if_z r1.x
                  itof r3.w, l(1)
                  mul r4.xyzw, r3.xyzw, r4.xyzw
                endif 
                mul r0.xyzw, r0.xyzw, r4.xyzw
                itof r1.x, l(255)
                div r1.x, r2.x, r1.x
                add r0.xyzw, r0.xyzw, r1.xxxx
                mov r1.xyzw, l(-1.000000,-1.000000,-1.000000,-1.000000)
                add r1.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, r1.xyzw, r2.yyyy
                mul r1.xyzw, r0.xyzw, r1.xyzw
                mov r2.xyzw, l(-0.500000,-0.500000,-0.500000,-0.500000)
                add r2.xyzw, r0.xyzw, r2.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                mov r1.xyzw, -r1.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw
                mov r0.xyzw, r0.xyzw
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 412 instruction slots used
                            
            };
        }

    }

    technique11 LitMatTech
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64
                //   float4x4 gW;                       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvTransposeW;           // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float       
                // WORLD                    1   xyzw        4     NONE   float       
                // WORLD                    2   xyzw        5     NONE   float       
                // WORLD                    3   xyzw        6     NONE   float       
                // COLOR                    0   xyzw        7     NONE   float   xyzw
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v7.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_temps 5
                dp3 r0.x, v1.xyzx, cb0[12].xyzx
                dp3 r0.y, v1.xyzx, cb0[13].xyzx
                dp3 r0.z, v1.xyzx, cb0[14].xyzx
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[4].xyzw
                dp4 r2.y, r1.xyzw, cb0[5].xyzw
                dp4 r2.z, r1.xyzw, cb0[6].xyzw
                dp4 r3.x, r1.xyzw, cb0[0].xyzw
                dp4 r3.y, r1.xyzw, cb0[1].xyzw
                dp4 r3.z, r1.xyzw, cb0[2].xyzw
                dp4 r3.w, r1.xyzw, cb0[3].xyzw
                mov r1.xy, v2.xyxx
                mov r4.xyzw, v7.xyzw
                mov o0.xyzw, r3.xyzw
                mov o4.xyzw, r4.xyzw
                mov o2.xyz, r2.xyzx
                mov o3.xyz, r0.xyzx
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64 [unused]
                //   float4x4 gW;                       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvTransposeW;           // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4 gAmbientLight;              // Offset:    0 Size:    16
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 lightColour;            // Offset:   16
                //       float3 pos;                    // Offset:   32
                //       float range;                   // Offset:   44
                //       float3 att;                    // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gPointLight[5];                  // Offset:   16 Size:   240
                //   float3 gEyePos;                    // Offset:  256 Size:    12
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 lightColour;            // Offset:  272
                //       float3 pos;                    // Offset:  288
                //       float range;                   // Offset:  300
                //       float3 direction;              // Offset:  304
                //       float spot;                    // Offset:  316
                //       float3 att;                    // Offset:  320
                //       float pad;                     // Offset:  332
                //
                //   } gSpotLight[9];                   // Offset:  272 Size:   576
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_constantbuffer cb1[53], dynamicIndexed
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 21
                mov r0.xyzw, cb0[18].xyzw
                mov r1.xyzw, v4.xyzw
                dp3 r2.x, v3.xyzx, v3.xyzx
                rsq r2.x, r2.x
                mul r2.xyz, r2.xxxx, v3.xyzx
                mov r3.xyz, -v2.xyzx
                add r3.xyz, r3.xyzx, cb1[16].xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                mov r4.xyz, l(0,0,0,0)
                mov r5.xyz, l(0,0,0,0)
                mov r1.xyz, r1.xyzx
                mov r0.xyzw, r0.xyzw
                mov r6.xyz, cb1[1].xyzx
                mov r7.xyz, cb1[2].xyzx
                mov r2.w, cb1[2].w
                mov r8.xyz, cb1[3].xyzx
                mov r9.xyz, v2.xyzx
                mov r2.xyz, r2.xyzx
                mov r3.xyz, r3.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[4].xyzx
                mov r7.xyz, cb1[5].xyzx
                mov r2.w, cb1[5].w
                mov r8.xyz, cb1[6].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[7].xyzx
                mov r7.xyz, cb1[8].xyzx
                mov r2.w, cb1[8].w
                mov r8.xyz, cb1[9].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[10].xyzx
                mov r7.xyz, cb1[11].xyzx
                mov r2.w, cb1[11].w
                mov r8.xyz, cb1[12].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[13].xyzx
                mov r7.xyz, cb1[14].xyzx
                mov r2.w, cb1[14].w
                mov r8.xyz, cb1[15].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r2.w, l(0)
                mov r6.xyz, r4.xyzx
                mov r7.xyz, r5.xyzx
                mov r3.w, r2.w
                loop 
                  ilt r4.w, r3.w, l(9)
                  breakc_z r4.w
                  mov r8.xyzw, r0.xyzw
                  mov r9.xyz, r1.xyzx
                  imul null, r4.w, r3.w, l(4)
                  mov r10.xyz, cb1[r4.w + 17].xyzx
                  mov r11.xyz, cb1[r4.w + 18].xyzx
                  mov r12.xyz, cb1[r4.w + 19].xyzx
                  mov r13.xyz, cb1[r4.w + 20].xyzx
                  mov r5.w, cb1[r4.w + 18].w
                  mov r4.w, cb1[r4.w + 19].w
                  mov r14.xyz, v2.xyzx
                  mov r15.xyz, r2.xyzx
                  mov r16.xyz, r3.xyzx
                  mov r10.xyz, r10.xyzx
                  mov r11.xyz, r11.xyzx
                  mov r5.w, r5.w
                  mov r13.xyz, r13.xyzx
                  mov r9.xyz, r9.xyzx
                  mov r8.xyzw, r8.xyzw
                  mov r10.xyz, r10.xyzx
                  mov r11.xyz, r11.xyzx
                  mov r5.w, r5.w
                  mov r13.xyz, r13.xyzx
                  mov r14.xyz, r14.xyzx
                  mov r15.xyz, r15.xyzx
                  mov r16.xyz, r16.xyzx
                  mov r17.xyz, l(0,0,0,0)
                  mov r18.xyz, l(0,0,0,0)
                  mov r19.xyz, -r11.xyzx
                  add r19.xyz, r14.xyzx, r19.xyzx
                  dp3 r6.w, r19.xyzx, r19.xyzx
                  sqrt r6.w, r6.w
                  lt r5.w, r5.w, r6.w
                  if_z r5.w
                    div r19.xyz, r19.xyzx, r6.wwww
                    mov r20.xyz, -r19.xyzx
                    dp3 r5.w, r20.xyzx, r15.xyzx
                    itof r7.w, l(0)
                    lt r7.w, r7.w, r5.w
                    if_nz r7.w
                      mul r20.xyz, r10.xyzx, r5.wwww
                      mul r17.xyz, r9.xyzx, r20.xyzx
                      dp3 r5.w, r19.xyzx, r15.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r9.xyz, r5.wwww, r15.xyzx
                      add r9.xyz, r19.xyzx, r9.xyzx
                      dp3 r5.w, r16.xyzx, r9.xyzx
                      max r5.w, r5.w, l(0.000000)
                      log r5.w, r5.w
                      mul r5.w, r5.w, r8.w
                      exp r5.w, r5.w
                      mul r9.xyz, r10.xyzx, r5.wwww
                      mul r18.xyz, r8.xyzx, r9.xyzx
                    endif 
                    mul r5.w, r13.y, r6.w
                    add r5.w, r5.w, r13.x
                    mov r7.w, l(1.000000)
                    mul r6.w, r6.w, r6.w
                    mul r6.w, r6.w, r7.w
                    mul r6.w, r13.z, r6.w
                    add r5.w, r5.w, r6.w
                    div r5.w, l(1.000000), r5.w
                    mul r17.xyz, r5.wwww, r17.xyzx
                    mul r18.xyz, r5.wwww, r18.xyzx
                  endif 
                  mov r17.xyz, r17.xyzx
                  mov r18.xyz, r18.xyzx
                  mov r8.xyz, -r11.xyzx
                  add r8.xyz, r8.xyzx, r14.xyzx
                  dp3 r5.w, r8.xyzx, r8.xyzx
                  rsq r5.w, r5.w
                  mul r8.xyz, r5.wwww, r8.xyzx
                  dp3 r5.w, r8.xyzx, r12.xyzx
                  max r5.w, r5.w, l(0.000000)
                  log r5.w, r5.w
                  mul r4.w, r4.w, r5.w
                  exp r4.w, r4.w
                  mul r8.xyz, r4.wwww, r17.xyzx
                  mul r9.xyz, r4.wwww, r18.xyzx
                  mov r8.xyz, r8.xyzx
                  mov r9.xyz, r9.xyzx
                  add r6.xyz, r6.xyzx, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx
                  iadd r3.w, r3.w, l(1)
                endloop 
                mul r0.xyz, r1.xyzx, cb1[0].xyzx
                add r0.xyz, r6.xyzx, r0.xyzx
                add r1.xyz, r7.xyzx, r0.xyzx
                mov r1.w, r1.w
                mov r1.xyz, r1.xyzx
                mov r1.w, r1.w
                mov o0.xyzw, r1.xyzw
                ret 
                // Approximately 361 instruction slots used
                            
            };
        }

    }

    technique11 LitMatTechCRTShader
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64
                //   float4x4 gW;                       // Offset:   64 Size:    64
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvTransposeW;           // Offset:  192 Size:    64
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float       
                // WORLD                    1   xyzw        4     NONE   float       
                // WORLD                    2   xyzw        5     NONE   float       
                // WORLD                    3   xyzw        6     NONE   float       
                // COLOR                    0   xyzw        7     NONE   float   xyzw
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[15], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v7.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_temps 5
                dp3 r0.x, v1.xyzx, cb0[12].xyzx
                dp3 r0.y, v1.xyzx, cb0[13].xyzx
                dp3 r0.z, v1.xyzx, cb0[14].xyzx
                mov r1.xyz, v0.xyzx
                mov r1.w, l(1.000000)
                dp4 r2.x, r1.xyzw, cb0[4].xyzw
                dp4 r2.y, r1.xyzw, cb0[5].xyzw
                dp4 r2.z, r1.xyzw, cb0[6].xyzw
                dp4 r3.x, r1.xyzw, cb0[0].xyzw
                dp4 r3.y, r1.xyzw, cb0[1].xyzw
                dp4 r3.z, r1.xyzw, cb0[2].xyzw
                dp4 r3.w, r1.xyzw, cb0[3].xyzw
                mov r1.xy, v2.xyxx
                mov r4.xyzw, v7.xyzw
                mov o0.xyzw, r3.xyzw
                mov o4.xyzw, r4.xyzw
                mov o2.xyz, r2.xyzx
                mov o3.xyz, r0.xyzx
                mov o1.xy, r1.xyxx
                ret 
                // Approximately 20 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64 [unused]
                //   float4x4 gW;                       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvTransposeW;           // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4 gAmbientLight;              // Offset:    0 Size:    16
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 lightColour;            // Offset:   16
                //       float3 pos;                    // Offset:   32
                //       float range;                   // Offset:   44
                //       float3 att;                    // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gPointLight[5];                  // Offset:   16 Size:   240
                //   float3 gEyePos;                    // Offset:  256 Size:    12
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 lightColour;            // Offset:  272
                //       float3 pos;                    // Offset:  288
                //       float range;                   // Offset:  300
                //       float3 direction;              // Offset:  304
                //       float spot;                    // Offset:  316
                //       float3 att;                    // Offset:  320
                //       float pad;                     // Offset:  332
                //
                //   } gSpotLight[9];                   // Offset:  272 Size:   576
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xy  
                // TEXCOORD                 0   xy          1     NONE   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_constantbuffer cb1[53], dynamicIndexed
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 21
                mov r0.xyzw, cb0[18].xyzw
                mov r1.xyzw, v4.xyzw
                dp3 r2.x, v3.xyzx, v3.xyzx
                rsq r2.x, r2.x
                mul r2.xyz, r2.xxxx, v3.xyzx
                mov r3.xyz, -v2.xyzx
                add r3.xyz, r3.xyzx, cb1[16].xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                mov r4.xyz, l(0,0,0,0)
                mov r5.xyz, l(0,0,0,0)
                mov r1.xyz, r1.xyzx
                mov r0.xyzw, r0.xyzw
                mov r6.xyz, cb1[1].xyzx
                mov r7.xyz, cb1[2].xyzx
                mov r2.w, cb1[2].w
                mov r8.xyz, cb1[3].xyzx
                mov r9.xyz, v2.xyzx
                mov r2.xyz, r2.xyzx
                mov r3.xyz, r3.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[4].xyzx
                mov r7.xyz, cb1[5].xyzx
                mov r2.w, cb1[5].w
                mov r8.xyz, cb1[6].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[7].xyzx
                mov r7.xyz, cb1[8].xyzx
                mov r2.w, cb1[8].w
                mov r8.xyz, cb1[9].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[10].xyzx
                mov r7.xyz, cb1[11].xyzx
                mov r2.w, cb1[11].w
                mov r8.xyz, cb1[12].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[13].xyzx
                mov r7.xyz, cb1[14].xyzx
                mov r2.w, cb1[14].w
                mov r8.xyz, cb1[15].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r2.w, l(0)
                mov r6.xyz, r4.xyzx
                mov r7.xyz, r5.xyzx
                mov r3.w, r2.w
                loop 
                  ilt r4.w, r3.w, l(9)
                  breakc_z r4.w
                  mov r8.xyzw, r0.xyzw
                  mov r9.xyz, r1.xyzx
                  imul null, r4.w, r3.w, l(4)
                  mov r10.xyz, cb1[r4.w + 17].xyzx
                  mov r11.xyz, cb1[r4.w + 18].xyzx
                  mov r12.xyz, cb1[r4.w + 19].xyzx
                  mov r13.xyz, cb1[r4.w + 20].xyzx
                  mov r5.w, cb1[r4.w + 18].w
                  mov r4.w, cb1[r4.w + 19].w
                  mov r14.xyz, v2.xyzx
                  mov r15.xyz, r2.xyzx
                  mov r16.xyz, r3.xyzx
                  mov r10.xyz, r10.xyzx
                  mov r11.xyz, r11.xyzx
                  mov r5.w, r5.w
                  mov r13.xyz, r13.xyzx
                  mov r9.xyz, r9.xyzx
                  mov r8.xyzw, r8.xyzw
                  mov r10.xyz, r10.xyzx
                  mov r11.xyz, r11.xyzx
                  mov r5.w, r5.w
                  mov r13.xyz, r13.xyzx
                  mov r14.xyz, r14.xyzx
                  mov r15.xyz, r15.xyzx
                  mov r16.xyz, r16.xyzx
                  mov r17.xyz, l(0,0,0,0)
                  mov r18.xyz, l(0,0,0,0)
                  mov r19.xyz, -r11.xyzx
                  add r19.xyz, r14.xyzx, r19.xyzx
                  dp3 r6.w, r19.xyzx, r19.xyzx
                  sqrt r6.w, r6.w
                  lt r5.w, r5.w, r6.w
                  if_z r5.w
                    div r19.xyz, r19.xyzx, r6.wwww
                    mov r20.xyz, -r19.xyzx
                    dp3 r5.w, r20.xyzx, r15.xyzx
                    itof r7.w, l(0)
                    lt r7.w, r7.w, r5.w
                    if_nz r7.w
                      mul r20.xyz, r10.xyzx, r5.wwww
                      mul r17.xyz, r9.xyzx, r20.xyzx
                      dp3 r5.w, r19.xyzx, r15.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r9.xyz, r5.wwww, r15.xyzx
                      add r9.xyz, r19.xyzx, r9.xyzx
                      dp3 r5.w, r16.xyzx, r9.xyzx
                      max r5.w, r5.w, l(0.000000)
                      log r5.w, r5.w
                      mul r5.w, r5.w, r8.w
                      exp r5.w, r5.w
                      mul r9.xyz, r10.xyzx, r5.wwww
                      mul r18.xyz, r8.xyzx, r9.xyzx
                    endif 
                    mul r5.w, r13.y, r6.w
                    add r5.w, r5.w, r13.x
                    mov r7.w, l(1.000000)
                    mul r6.w, r6.w, r6.w
                    mul r6.w, r6.w, r7.w
                    mul r6.w, r13.z, r6.w
                    add r5.w, r5.w, r6.w
                    div r5.w, l(1.000000), r5.w
                    mul r17.xyz, r5.wwww, r17.xyzx
                    mul r18.xyz, r5.wwww, r18.xyzx
                  endif 
                  mov r17.xyz, r17.xyzx
                  mov r18.xyz, r18.xyzx
                  mov r8.xyz, -r11.xyzx
                  add r8.xyz, r8.xyzx, r14.xyzx
                  dp3 r5.w, r8.xyzx, r8.xyzx
                  rsq r5.w, r5.w
                  mul r8.xyz, r5.wwww, r8.xyzx
                  dp3 r5.w, r8.xyzx, r12.xyzx
                  max r5.w, r5.w, l(0.000000)
                  log r5.w, r5.w
                  mul r4.w, r4.w, r5.w
                  exp r4.w, r4.w
                  mul r8.xyz, r4.wwww, r17.xyzx
                  mul r9.xyz, r4.wwww, r18.xyzx
                  mov r8.xyz, r8.xyzx
                  mov r9.xyz, r9.xyzx
                  add r6.xyz, r6.xyzx, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx
                  iadd r3.w, r3.w, l(1)
                endloop 
                mul r0.xyz, r1.xyzx, cb1[0].xyzx
                add r0.xyz, r6.xyzx, r0.xyzx
                add r1.xyz, r7.xyzx, r0.xyzx
                mov r1.w, r1.w
                mov r0.xy, v0.xyxx
                mov r1.xyz, r1.xyzx
                mov r1.w, r1.w
                mov r0.z, l(0.800000)
                mov r0.w, l(0.700000)
                itof r2.x, l(27)
                mov r2.y, l(2.100000)
                mov r3.xyz, l(0.750000,0.750000,0.750000,0)
                mov r2.zw, l(-0.000000,-0.000000,-0.500000,-0.500000)
                add r0.xy, r0.xyxx, r2.zwzz
                ftou r0.x, r0.x
                mov r2.z, l(3)
                udiv null, r0.x, r0.x, r2.z
                mov r2.z, l(1)
                ieq r2.z, r0.x, r2.z
                if_nz r2.z
                  itof r4.xw, l(1, 0, 0, 1)
                  mov r4.y, r0.z
                  mov r4.z, r0.w
                else 
                  mov r2.z, l(2)
                  ieq r0.x, r0.x, r2.z
                  if_nz r0.x
                    itof r4.yw, l(0, 1, 0, 1)
                    mov r4.x, r0.w
                    mov r4.z, r0.z
                  else 
                    itof r4.zw, l(0, 0, 1, 1)
                    mov r4.x, r0.z
                    mov r4.y, r0.w
                  endif 
                endif 
                ftou r0.x, r0.y
                mov r0.y, l(3)
                udiv null, r0.x, r0.x, r0.y
                if_z r0.x
                  itof r3.w, l(1)
                  mul r4.xyzw, r3.xyzw, r4.xyzw
                endif 
                mul r0.xyzw, r1.xyzw, r4.xyzw
                itof r1.x, l(255)
                div r1.x, r2.x, r1.x
                add r0.xyzw, r0.xyzw, r1.xxxx
                mov r1.xyzw, l(-1.000000,-1.000000,-1.000000,-1.000000)
                add r1.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, r1.xyzw, r2.yyyy
                mul r1.xyzw, r0.xyzw, r1.xyzw
                mov r2.xyzw, l(-0.500000,-0.500000,-0.500000,-0.500000)
                add r2.xyzw, r0.xyzw, r2.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                mov r1.xyzw, -r1.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw
                mov r0.xyzw, r0.xyzw
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 412 instruction slots used
                            
            };
        }

    }

    technique11 LitMatTechInstanced
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64 [unused]
                //   float4x4 gW;                       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gInvTransposeW;           // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // COLOR                    0   xyzw        7     NONE   float   xyzw
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_temps 5
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw
                dp4 r2.y, r0.xyzw, cb0[9].xyzw
                dp4 r2.z, r0.xyzw, cb0[10].xyzw
                dp4 r2.w, r0.xyzw, cb0[11].xyzw
                mov r3.xy, v2.xyxx
                mov r4.xyzw, v7.xyzw
                mov o0.xyzw, r2.xyzw
                mov o4.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o1.xy, r3.xyxx
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64 [unused]
                //   float4x4 gW;                       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvTransposeW;           // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4 gAmbientLight;              // Offset:    0 Size:    16
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 lightColour;            // Offset:   16
                //       float3 pos;                    // Offset:   32
                //       float range;                   // Offset:   44
                //       float3 att;                    // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gPointLight[5];                  // Offset:   16 Size:   240
                //   float3 gEyePos;                    // Offset:  256 Size:    12
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 lightColour;            // Offset:  272
                //       float3 pos;                    // Offset:  288
                //       float range;                   // Offset:  300
                //       float3 direction;              // Offset:  304
                //       float spot;                    // Offset:  316
                //       float3 att;                    // Offset:  320
                //       float pad;                     // Offset:  332
                //
                //   } gSpotLight[9];                   // Offset:  272 Size:   576
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float       
                // TEXCOORD                 0   xy          1     NONE   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_constantbuffer cb1[53], dynamicIndexed
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 21
                mov r0.xyzw, cb0[18].xyzw
                mov r1.xyzw, v4.xyzw
                dp3 r2.x, v3.xyzx, v3.xyzx
                rsq r2.x, r2.x
                mul r2.xyz, r2.xxxx, v3.xyzx
                mov r3.xyz, -v2.xyzx
                add r3.xyz, r3.xyzx, cb1[16].xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                mov r4.xyz, l(0,0,0,0)
                mov r5.xyz, l(0,0,0,0)
                mov r1.xyz, r1.xyzx
                mov r0.xyzw, r0.xyzw
                mov r6.xyz, cb1[1].xyzx
                mov r7.xyz, cb1[2].xyzx
                mov r2.w, cb1[2].w
                mov r8.xyz, cb1[3].xyzx
                mov r9.xyz, v2.xyzx
                mov r2.xyz, r2.xyzx
                mov r3.xyz, r3.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[4].xyzx
                mov r7.xyz, cb1[5].xyzx
                mov r2.w, cb1[5].w
                mov r8.xyz, cb1[6].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[7].xyzx
                mov r7.xyz, cb1[8].xyzx
                mov r2.w, cb1[8].w
                mov r8.xyz, cb1[9].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[10].xyzx
                mov r7.xyz, cb1[11].xyzx
                mov r2.w, cb1[11].w
                mov r8.xyz, cb1[12].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[13].xyzx
                mov r7.xyz, cb1[14].xyzx
                mov r2.w, cb1[14].w
                mov r8.xyz, cb1[15].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r2.w, l(0)
                mov r6.xyz, r4.xyzx
                mov r7.xyz, r5.xyzx
                mov r3.w, r2.w
                loop 
                  ilt r4.w, r3.w, l(9)
                  breakc_z r4.w
                  mov r8.xyzw, r0.xyzw
                  mov r9.xyz, r1.xyzx
                  imul null, r4.w, r3.w, l(4)
                  mov r10.xyz, cb1[r4.w + 17].xyzx
                  mov r11.xyz, cb1[r4.w + 18].xyzx
                  mov r12.xyz, cb1[r4.w + 19].xyzx
                  mov r13.xyz, cb1[r4.w + 20].xyzx
                  mov r5.w, cb1[r4.w + 18].w
                  mov r4.w, cb1[r4.w + 19].w
                  mov r14.xyz, v2.xyzx
                  mov r15.xyz, r2.xyzx
                  mov r16.xyz, r3.xyzx
                  mov r10.xyz, r10.xyzx
                  mov r11.xyz, r11.xyzx
                  mov r5.w, r5.w
                  mov r13.xyz, r13.xyzx
                  mov r9.xyz, r9.xyzx
                  mov r8.xyzw, r8.xyzw
                  mov r10.xyz, r10.xyzx
                  mov r11.xyz, r11.xyzx
                  mov r5.w, r5.w
                  mov r13.xyz, r13.xyzx
                  mov r14.xyz, r14.xyzx
                  mov r15.xyz, r15.xyzx
                  mov r16.xyz, r16.xyzx
                  mov r17.xyz, l(0,0,0,0)
                  mov r18.xyz, l(0,0,0,0)
                  mov r19.xyz, -r11.xyzx
                  add r19.xyz, r14.xyzx, r19.xyzx
                  dp3 r6.w, r19.xyzx, r19.xyzx
                  sqrt r6.w, r6.w
                  lt r5.w, r5.w, r6.w
                  if_z r5.w
                    div r19.xyz, r19.xyzx, r6.wwww
                    mov r20.xyz, -r19.xyzx
                    dp3 r5.w, r20.xyzx, r15.xyzx
                    itof r7.w, l(0)
                    lt r7.w, r7.w, r5.w
                    if_nz r7.w
                      mul r20.xyz, r10.xyzx, r5.wwww
                      mul r17.xyz, r9.xyzx, r20.xyzx
                      dp3 r5.w, r19.xyzx, r15.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r9.xyz, r5.wwww, r15.xyzx
                      add r9.xyz, r19.xyzx, r9.xyzx
                      dp3 r5.w, r16.xyzx, r9.xyzx
                      max r5.w, r5.w, l(0.000000)
                      log r5.w, r5.w
                      mul r5.w, r5.w, r8.w
                      exp r5.w, r5.w
                      mul r9.xyz, r10.xyzx, r5.wwww
                      mul r18.xyz, r8.xyzx, r9.xyzx
                    endif 
                    mul r5.w, r13.y, r6.w
                    add r5.w, r5.w, r13.x
                    mov r7.w, l(1.000000)
                    mul r6.w, r6.w, r6.w
                    mul r6.w, r6.w, r7.w
                    mul r6.w, r13.z, r6.w
                    add r5.w, r5.w, r6.w
                    div r5.w, l(1.000000), r5.w
                    mul r17.xyz, r5.wwww, r17.xyzx
                    mul r18.xyz, r5.wwww, r18.xyzx
                  endif 
                  mov r17.xyz, r17.xyzx
                  mov r18.xyz, r18.xyzx
                  mov r8.xyz, -r11.xyzx
                  add r8.xyz, r8.xyzx, r14.xyzx
                  dp3 r5.w, r8.xyzx, r8.xyzx
                  rsq r5.w, r5.w
                  mul r8.xyz, r5.wwww, r8.xyzx
                  dp3 r5.w, r8.xyzx, r12.xyzx
                  max r5.w, r5.w, l(0.000000)
                  log r5.w, r5.w
                  mul r4.w, r4.w, r5.w
                  exp r4.w, r4.w
                  mul r8.xyz, r4.wwww, r17.xyzx
                  mul r9.xyz, r4.wwww, r18.xyzx
                  mov r8.xyz, r8.xyzx
                  mov r9.xyz, r9.xyzx
                  add r6.xyz, r6.xyzx, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx
                  iadd r3.w, r3.w, l(1)
                endloop 
                mul r0.xyz, r1.xyzx, cb1[0].xyzx
                add r0.xyz, r6.xyzx, r0.xyzx
                add r1.xyz, r7.xyzx, r0.xyzx
                mov r1.w, r1.w
                mov r1.xyz, r1.xyzx
                mov r1.w, r1.w
                mov o0.xyzw, r1.xyzw
                ret 
                // Approximately 361 instruction slots used
                            
            };
        }

    }

    technique11 LitMatTechInstancedCRTShader
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64 [unused]
                //   float4x4 gW;                       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64
                //   float4x4 gInvTransposeW;           // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // POSITION                 0   xyz         0     NONE   float   xyz 
                // NORMAL                   0   xyz         1     NONE   float   xyz 
                // TEXCOORD                 0   xy          2     NONE   float   xy  
                // WORLD                    0   xyzw        3     NONE   float   xyz 
                // WORLD                    1   xyzw        4     NONE   float   xyz 
                // WORLD                    2   xyzw        5     NONE   float   xyz 
                // WORLD                    3   xyzw        6     NONE   float   xyz 
                // COLOR                    0   xyzw        7     NONE   float   xyzw
                // SV_InstanceID            0   x           8   INSTID    uint       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xyzw
                // TEXCOORD                 0   xy          1     NONE   float   xy  
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[12], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_input v3.xyz
                dcl_input v4.xyz
                dcl_input v5.xyz
                dcl_input v6.xyz
                dcl_input v7.xyzw
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xy
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xyzw
                dcl_temps 5
                mul r0.xyz, v0.xxxx, v3.xyzx
                mul r1.xyz, v0.yyyy, v4.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v0.zzzz, v5.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v6.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, r1.xyzx
                mul r1.xyz, v1.xxxx, v3.xyzx
                mul r2.xyz, v1.yyyy, v4.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mul r2.xyz, v1.zzzz, v5.xyzx
                add r1.xyz, r1.xyzx, r2.xyzx
                mov r0.w, l(1.000000)
                dp4 r2.x, r0.xyzw, cb0[8].xyzw
                dp4 r2.y, r0.xyzw, cb0[9].xyzw
                dp4 r2.z, r0.xyzw, cb0[10].xyzw
                dp4 r2.w, r0.xyzw, cb0[11].xyzw
                mov r3.xy, v2.xyxx
                mov r4.xyzw, v7.xyzw
                mov o0.xyzw, r2.xyzw
                mov o4.xyzw, r4.xyzw
                mov o2.xyz, r0.xyzx
                mov o3.xyz, r1.xyzx
                mov o1.xy, r3.xyxx
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 6.3.9600.16384
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWVP;                     // Offset:    0 Size:    64 [unused]
                //   float4x4 gW;                       // Offset:   64 Size:    64 [unused]
                //   float4x4 gViewProj;                // Offset:  128 Size:    64 [unused]
                //   float4x4 gInvTransposeW;           // Offset:  192 Size:    64 [unused]
                //   
                //   struct Material
                //   {
                //       
                //       float4 Ambient;                // Offset:  256
                //       float4 Diffuse;                // Offset:  272
                //       float4 Specular;               // Offset:  288
                //       float4 Reflect;                // Offset:  304
                //
                //   } gMaterial;                       // Offset:  256 Size:    64
                //
                // }
                //
                // cbuffer cbPerFrame
                // {
                //
                //   float4 gAmbientLight;              // Offset:    0 Size:    16
                //   
                //   struct PointLight
                //   {
                //       
                //       float4 lightColour;            // Offset:   16
                //       float3 pos;                    // Offset:   32
                //       float range;                   // Offset:   44
                //       float3 att;                    // Offset:   48
                //       float pad;                     // Offset:   60
                //
                //   } gPointLight[5];                  // Offset:   16 Size:   240
                //   float3 gEyePos;                    // Offset:  256 Size:    12
                //   
                //   struct SpotLight
                //   {
                //       
                //       float4 lightColour;            // Offset:  272
                //       float3 pos;                    // Offset:  288
                //       float range;                   // Offset:  300
                //       float3 direction;              // Offset:  304
                //       float spot;                    // Offset:  316
                //       float3 att;                    // Offset:  320
                //       float pad;                     // Offset:  332
                //
                //   } gSpotLight[9];                   // Offset:  272 Size:   576
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                // cbPerFrame                        cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_POSITION              0   xyzw        0      POS   float   xy  
                // TEXCOORD                 0   xy          1     NONE   float       
                // POSITION                 0   xyz         2     NONE   float   xyz 
                // NORMAL                   0   xyz         3     NONE   float   xyz 
                // COLOR                    0   xyzw        4     NONE   float   xyzw
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue  Format   Used
                // -------------------- ----- ------ -------- -------- ------- ------
                // SV_Target                0   xyzw        0   TARGET   float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed | skipOptimization
                dcl_constantbuffer cb0[19], immediateIndexed
                dcl_constantbuffer cb1[53], dynamicIndexed
                dcl_input_ps_siv linear noperspective v0.xy, position
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xyz
                dcl_input_ps linear v4.xyzw
                dcl_output o0.xyzw
                dcl_temps 21
                mov r0.xyzw, cb0[18].xyzw
                mov r1.xyzw, v4.xyzw
                dp3 r2.x, v3.xyzx, v3.xyzx
                rsq r2.x, r2.x
                mul r2.xyz, r2.xxxx, v3.xyzx
                mov r3.xyz, -v2.xyzx
                add r3.xyz, r3.xyzx, cb1[16].xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx
                mov r4.xyz, l(0,0,0,0)
                mov r5.xyz, l(0,0,0,0)
                mov r1.xyz, r1.xyzx
                mov r0.xyzw, r0.xyzw
                mov r6.xyz, cb1[1].xyzx
                mov r7.xyz, cb1[2].xyzx
                mov r2.w, cb1[2].w
                mov r8.xyz, cb1[3].xyzx
                mov r9.xyz, v2.xyzx
                mov r2.xyz, r2.xyzx
                mov r3.xyz, r3.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[4].xyzx
                mov r7.xyz, cb1[5].xyzx
                mov r2.w, cb1[5].w
                mov r8.xyz, cb1[6].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[7].xyzx
                mov r7.xyz, cb1[8].xyzx
                mov r2.w, cb1[8].w
                mov r8.xyz, cb1[9].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[10].xyzx
                mov r7.xyz, cb1[11].xyzx
                mov r2.w, cb1[11].w
                mov r8.xyz, cb1[12].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r6.xyz, cb1[13].xyzx
                mov r7.xyz, cb1[14].xyzx
                mov r2.w, cb1[14].w
                mov r8.xyz, cb1[15].xyzx
                mov r9.xyz, v2.xyzx
                mov r10.xyz, l(0,0,0,0)
                mov r11.xyz, l(0,0,0,0)
                mov r7.xyz, -r7.xyzx
                add r7.xyz, r7.xyzx, r9.xyzx
                dp3 r3.w, r7.xyzx, r7.xyzx
                sqrt r3.w, r3.w
                lt r2.w, r2.w, r3.w
                if_z r2.w
                  div r7.xyz, r7.xyzx, r3.wwww
                  mov r9.xyz, -r7.xyzx
                  dp3 r2.w, r9.xyzx, r2.xyzx
                  itof r4.w, l(0)
                  lt r4.w, r4.w, r2.w
                  if_nz r4.w
                    mul r9.xyz, r6.xyzx, r2.wwww
                    mul r10.xyz, r1.xyzx, r9.xyzx
                    dp3 r2.w, r7.xyzx, r2.xyzx
                    add r2.w, r2.w, r2.w
                    mov r2.w, -r2.w
                    mul r9.xyz, r2.wwww, r2.xyzx
                    add r7.xyz, r7.xyzx, r9.xyzx
                    dp3 r2.w, r3.xyzx, r7.xyzx
                    max r2.w, r2.w, l(0.000000)
                    log r2.w, r2.w
                    mul r2.w, r0.w, r2.w
                    exp r2.w, r2.w
                    mul r6.xyz, r6.xyzx, r2.wwww
                    mul r11.xyz, r0.xyzx, r6.xyzx
                  endif 
                  mul r2.w, r8.y, r3.w
                  add r2.w, r2.w, r8.x
                  mov r4.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  mul r3.w, r3.w, r4.w
                  mul r3.w, r8.z, r3.w
                  add r2.w, r2.w, r3.w
                  div r2.w, l(1.000000), r2.w
                  mul r10.xyz, r2.wwww, r10.xyzx
                  mul r11.xyz, r2.wwww, r11.xyzx
                endif 
                mov r10.xyz, r10.xyzx
                mov r11.xyz, r11.xyzx
                add r4.xyz, r4.xyzx, r10.xyzx
                add r5.xyz, r5.xyzx, r11.xyzx
                mov r2.w, l(0)
                mov r6.xyz, r4.xyzx
                mov r7.xyz, r5.xyzx
                mov r3.w, r2.w
                loop 
                  ilt r4.w, r3.w, l(9)
                  breakc_z r4.w
                  mov r8.xyzw, r0.xyzw
                  mov r9.xyz, r1.xyzx
                  imul null, r4.w, r3.w, l(4)
                  mov r10.xyz, cb1[r4.w + 17].xyzx
                  mov r11.xyz, cb1[r4.w + 18].xyzx
                  mov r12.xyz, cb1[r4.w + 19].xyzx
                  mov r13.xyz, cb1[r4.w + 20].xyzx
                  mov r5.w, cb1[r4.w + 18].w
                  mov r4.w, cb1[r4.w + 19].w
                  mov r14.xyz, v2.xyzx
                  mov r15.xyz, r2.xyzx
                  mov r16.xyz, r3.xyzx
                  mov r10.xyz, r10.xyzx
                  mov r11.xyz, r11.xyzx
                  mov r5.w, r5.w
                  mov r13.xyz, r13.xyzx
                  mov r9.xyz, r9.xyzx
                  mov r8.xyzw, r8.xyzw
                  mov r10.xyz, r10.xyzx
                  mov r11.xyz, r11.xyzx
                  mov r5.w, r5.w
                  mov r13.xyz, r13.xyzx
                  mov r14.xyz, r14.xyzx
                  mov r15.xyz, r15.xyzx
                  mov r16.xyz, r16.xyzx
                  mov r17.xyz, l(0,0,0,0)
                  mov r18.xyz, l(0,0,0,0)
                  mov r19.xyz, -r11.xyzx
                  add r19.xyz, r14.xyzx, r19.xyzx
                  dp3 r6.w, r19.xyzx, r19.xyzx
                  sqrt r6.w, r6.w
                  lt r5.w, r5.w, r6.w
                  if_z r5.w
                    div r19.xyz, r19.xyzx, r6.wwww
                    mov r20.xyz, -r19.xyzx
                    dp3 r5.w, r20.xyzx, r15.xyzx
                    itof r7.w, l(0)
                    lt r7.w, r7.w, r5.w
                    if_nz r7.w
                      mul r20.xyz, r10.xyzx, r5.wwww
                      mul r17.xyz, r9.xyzx, r20.xyzx
                      dp3 r5.w, r19.xyzx, r15.xyzx
                      add r5.w, r5.w, r5.w
                      mov r5.w, -r5.w
                      mul r9.xyz, r5.wwww, r15.xyzx
                      add r9.xyz, r19.xyzx, r9.xyzx
                      dp3 r5.w, r16.xyzx, r9.xyzx
                      max r5.w, r5.w, l(0.000000)
                      log r5.w, r5.w
                      mul r5.w, r5.w, r8.w
                      exp r5.w, r5.w
                      mul r9.xyz, r10.xyzx, r5.wwww
                      mul r18.xyz, r8.xyzx, r9.xyzx
                    endif 
                    mul r5.w, r13.y, r6.w
                    add r5.w, r5.w, r13.x
                    mov r7.w, l(1.000000)
                    mul r6.w, r6.w, r6.w
                    mul r6.w, r6.w, r7.w
                    mul r6.w, r13.z, r6.w
                    add r5.w, r5.w, r6.w
                    div r5.w, l(1.000000), r5.w
                    mul r17.xyz, r5.wwww, r17.xyzx
                    mul r18.xyz, r5.wwww, r18.xyzx
                  endif 
                  mov r17.xyz, r17.xyzx
                  mov r18.xyz, r18.xyzx
                  mov r8.xyz, -r11.xyzx
                  add r8.xyz, r8.xyzx, r14.xyzx
                  dp3 r5.w, r8.xyzx, r8.xyzx
                  rsq r5.w, r5.w
                  mul r8.xyz, r5.wwww, r8.xyzx
                  dp3 r5.w, r8.xyzx, r12.xyzx
                  max r5.w, r5.w, l(0.000000)
                  log r5.w, r5.w
                  mul r4.w, r4.w, r5.w
                  exp r4.w, r4.w
                  mul r8.xyz, r4.wwww, r17.xyzx
                  mul r9.xyz, r4.wwww, r18.xyzx
                  mov r8.xyz, r8.xyzx
                  mov r9.xyz, r9.xyzx
                  add r6.xyz, r6.xyzx, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx
                  iadd r3.w, r3.w, l(1)
                endloop 
                mul r0.xyz, r1.xyzx, cb1[0].xyzx
                add r0.xyz, r6.xyzx, r0.xyzx
                add r1.xyz, r7.xyzx, r0.xyzx
                mov r1.w, r1.w
                mov r0.xy, v0.xyxx
                mov r1.xyz, r1.xyzx
                mov r1.w, r1.w
                mov r0.z, l(0.800000)
                mov r0.w, l(0.700000)
                itof r2.x, l(27)
                mov r2.y, l(2.100000)
                mov r3.xyz, l(0.750000,0.750000,0.750000,0)
                mov r2.zw, l(-0.000000,-0.000000,-0.500000,-0.500000)
                add r0.xy, r0.xyxx, r2.zwzz
                ftou r0.x, r0.x
                mov r2.z, l(3)
                udiv null, r0.x, r0.x, r2.z
                mov r2.z, l(1)
                ieq r2.z, r0.x, r2.z
                if_nz r2.z
                  itof r4.xw, l(1, 0, 0, 1)
                  mov r4.y, r0.z
                  mov r4.z, r0.w
                else 
                  mov r2.z, l(2)
                  ieq r0.x, r0.x, r2.z
                  if_nz r0.x
                    itof r4.yw, l(0, 1, 0, 1)
                    mov r4.x, r0.w
                    mov r4.z, r0.z
                  else 
                    itof r4.zw, l(0, 0, 1, 1)
                    mov r4.x, r0.z
                    mov r4.y, r0.w
                  endif 
                endif 
                ftou r0.x, r0.y
                mov r0.y, l(3)
                udiv null, r0.x, r0.x, r0.y
                if_z r0.x
                  itof r3.w, l(1)
                  mul r4.xyzw, r3.xyzw, r4.xyzw
                endif 
                mul r0.xyzw, r1.xyzw, r4.xyzw
                itof r1.x, l(255)
                div r1.x, r2.x, r1.x
                add r0.xyzw, r0.xyzw, r1.xxxx
                mov r1.xyzw, l(-1.000000,-1.000000,-1.000000,-1.000000)
                add r1.xyzw, r0.xyzw, r1.xyzw
                mul r1.xyzw, r1.xyzw, r2.yyyy
                mul r1.xyzw, r0.xyzw, r1.xyzw
                mov r2.xyzw, l(-0.500000,-0.500000,-0.500000,-0.500000)
                add r2.xyzw, r0.xyzw, r2.xyzw
                mul r1.xyzw, r1.xyzw, r2.xyzw
                mov r1.xyzw, -r1.xyzw
                add r0.xyzw, r0.xyzw, r1.xyzw
                mov r0.xyzw, r0.xyzw
                mov o0.xyzw, r0.xyzw
                ret 
                // Approximately 412 instruction slots used
                            
            };
        }

    }

}

